---
// Navigation component
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-luxury-black bg-opacity-90 backdrop-blur-md border-b border-luxury-gold border-opacity-20">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="/" class="text-2xl font-playfair font-bold text-luxury-gold tracking-wider hover:text-luxury-gold-light transition-colors duration-300">
          MEHLEJ
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-8">
          <a href="/" class="text-luxury-white hover:text-luxury-gold px-3 py-2 text-sm font-medium transition-colors duration-300">
            Inicio
          </a>
          <a href="/#products" class="text-luxury-white hover:text-luxury-gold px-3 py-2 text-sm font-medium transition-colors duration-300">
            Colección
          </a>
          <a href="/about" class="text-luxury-white hover:text-luxury-gold px-3 py-2 text-sm font-medium transition-colors duration-300">
            Nosotros
          </a>
          <a href="/contact" class="text-luxury-white hover:text-luxury-gold px-3 py-2 text-sm font-medium transition-colors duration-300">
            Contacto
          </a>
        </div>
      </div>
      
      <!-- Right side - Cart, Login and Mobile menu -->
      <div class="flex items-center space-x-4">
        <!-- Cart Icon -->
        <button 
          id="cart-button"
          class="relative p-2 text-luxury-white hover:text-luxury-gold transition-colors duration-300"
          onclick="toggleCart()"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
          </svg>
          <!-- Cart Badge -->
          <span 
            id="cart-badge"
            class="absolute -top-1 -right-1 bg-luxury-gold text-luxury-black text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold"
            style="display: none;"
          >
            0
          </span>
        </button>
        
        <!-- Login Button -->
        <button 
          onclick="document.getElementById('login-modal').classList.remove('hidden'); document.body.style.overflow = 'hidden';"
          class="hidden md:block bg-luxury-gold text-luxury-black px-4 py-2 rounded text-sm font-medium hover:bg-luxury-gold-dark transition-colors duration-200"
        >
          Login
        </button>
        
        <!-- Mobile menu button -->
        <button 
          id="mobile-menu-button"
          class="md:hidden p-2 text-luxury-white hover:text-luxury-gold transition-colors duration-300"
          onclick="toggleMobileMenu()"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile Navigation -->
  <div id="mobile-menu" class="md:hidden hidden">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-luxury-gray border-t border-luxury-gold border-opacity-20">
      <a href="/" class="text-luxury-white hover:text-luxury-gold block px-3 py-2 text-base font-medium transition-colors duration-300">
        Inicio
      </a>
      <a href="/#products" class="text-luxury-white hover:text-luxury-gold block px-3 py-2 text-base font-medium transition-colors duration-300">
        Colección
      </a>
      <a href="/about" class="text-luxury-white hover:text-luxury-gold block px-3 py-2 text-base font-medium transition-colors duration-300">
        Nosotros
      </a>
      <a href="/contact" class="text-luxury-white hover:text-luxury-gold block px-3 py-2 text-base font-medium transition-colors duration-300">
        Contacto
      </a>
      <button 
        onclick="document.getElementById('login-modal').classList.remove('hidden'); document.body.style.overflow = 'hidden';"
        class="w-full text-left bg-luxury-gold text-luxury-black px-3 py-2 text-base font-medium rounded hover:bg-luxury-gold-dark transition-colors duration-200"
      >
        Login
      </button>
    </div>
  </div>
</nav>

<!-- Login Modal -->
<div id="login-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
  <div class="bg-luxury-gray rounded-lg p-6 w-full max-w-md">
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-2xl font-playfair font-semibold text-luxury-gold">Iniciar Sesión</h2>
      <button 
        onclick="document.getElementById('login-modal').classList.add('hidden'); document.body.style.overflow = 'auto';"
        class="text-luxury-white hover:text-luxury-gold transition-colors duration-300"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <form id="login-form" class="space-y-4" onsubmit="handleLogin(event)">
      <div>
        <label for="email" class="block text-luxury-gold-light text-sm mb-2">Correo Electrónico</label>
        <input 
          type="email" 
          id="email" 
          required
          class="w-full px-4 py-3 rounded bg-luxury-black text-luxury-white border border-luxury-gold focus:outline-none focus:ring-2 focus:ring-luxury-gold"
          placeholder="tu@email.com"
        />
      </div>
      
      <div>
        <label for="password" class="block text-luxury-gold-light text-sm mb-2">Contraseña</label>
        <input 
          type="password" 
          id="password" 
          required
          class="w-full px-4 py-3 rounded bg-luxury-black text-luxury-white border border-luxury-gold focus:outline-none focus:ring-2 focus:ring-luxury-gold"
          placeholder="••••••••"
        />
      </div>
      
      <div id="login-error" class="text-red-400 text-sm hidden"></div>
      
      <button 
        type="submit"
        class="w-full bg-luxury-gold text-luxury-black py-3 px-6 font-medium rounded hover:bg-luxury-gold-dark transition-colors duration-300"
      >
        Iniciar Sesión
      </button>
    </form>
    
    <div class="mt-4 text-center">
      <p class="text-luxury-gold-light text-sm">
        Acceso solo para administradores
      </p>
    </div>
  </div>
</div>

<!-- Cart Sidebar -->
<div 
  id="cart-sidebar"
  class="fixed top-0 right-0 h-full w-80 bg-luxury-gray shadow-2xl transform translate-x-full transition-transform duration-300 ease-in-out z-50"
>
  <div class="flex flex-col h-full">
    <!-- Cart Header -->
    <div class="flex items-center justify-between p-6 border-b border-luxury-gold border-opacity-20">
      <h2 class="text-xl font-playfair font-semibold text-luxury-white">Carrito de Compras</h2>
      <button 
        onclick="toggleCart()"
        class="text-luxury-white hover:text-luxury-gold transition-colors duration-300"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Cart Items -->
    <div id="cart-items" class="flex-1 overflow-y-auto p-6">
      <div class="text-center text-luxury-gold-light">
        <svg class="w-16 h-16 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
        </svg>
        <p>Tu carrito está vacío</p>
      </div>
    </div>
    
    <!-- Cart Footer -->
    <div class="p-6 border-t border-luxury-gold border-opacity-20">
      <div class="flex justify-between items-center mb-4">
        <span class="text-lg font-medium text-luxury-white">Total:</span>
        <span id="cart-total" class="text-xl font-playfair font-bold text-luxury-gold">$0.00</span>
      </div>
      <button 
        onclick="proceedToCheckout()"
        class="w-full bg-luxury-gold text-luxury-black py-3 px-6 font-medium uppercase tracking-wide hover:bg-luxury-gold-dark transition-colors duration-300"
        disabled
      >
        Proceder al Pago
      </button>
    </div>
  </div>
</div>

<!-- Cart Overlay -->
<div 
  id="cart-overlay"
  class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden"
  onclick="toggleCart()"
></div>

<script>
  import { auth } from '../lib/firebase';
  import { signInWithEmailAndPassword } from 'firebase/auth';
  
  // Cart functionality
  let cart = [];
  
  // Make functions globally available
  window.toggleCart = function() {
    const sidebar = document.getElementById('cart-sidebar');
    const overlay = document.getElementById('cart-overlay');
    
    if (sidebar.classList.contains('translate-x-full')) {
      sidebar.classList.remove('translate-x-full');
      overlay.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    } else {
      sidebar.classList.add('translate-x-full');
      overlay.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  };
  
  window.toggleMobileMenu = function() {
    const menu = document.getElementById('mobile-menu');
    menu.classList.toggle('hidden');
  };
  
  // Login Modal Functions - Make them globally available
  window.openLoginModal = function() {
    console.log('Opening login modal...');
    const modal = document.getElementById('login-modal');
    if (modal) {
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      // Close mobile menu if open
      const mobileMenu = document.getElementById('mobile-menu');
      if (mobileMenu) {
        mobileMenu.classList.add('hidden');
      }
      console.log('Modal opened successfully');
    } else {
      console.error('Login modal not found');
    }
  };
  
  window.closeLoginModal = function() {
    console.log('Closing login modal...');
    const modal = document.getElementById('login-modal');
    if (modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = 'auto';
      // Clear form
      const form = document.getElementById('login-form');
      if (form) {
        form.reset();
      }
      // Hide error message
      const error = document.getElementById('login-error');
      if (error) {
        error.classList.add('hidden');
      }
      console.log('Modal closed successfully');
    }
  };
  
  // Login form submission
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, setting up login form...');
    
    // Close modal when clicking outside
    const loginModal = document.getElementById('login-modal');
    if (loginModal) {
      loginModal.addEventListener('click', (e) => {
        if (e.target === loginModal) {
          closeLoginModal();
        }
      });
    }
    
    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeLoginModal();
      }
    });
  });
  
  // Handle login form submission with Firebase Auth
  window.handleLogin = async function(event) {
    event.preventDefault();
    
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const errorElement = document.getElementById('login-error');
    
    if (!emailInput || !passwordInput) {
      console.error('Email or password input not found');
      return;
    }
    
    const email = emailInput.value;
    const password = passwordInput.value;
    
    console.log('Login attempt:', { email });
    console.log('Firebase config check:', {
      apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY ? 'Present' : 'Missing',
      authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN ? 'Present' : 'Missing',
      projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID ? 'Present' : 'Missing'
    });
    
    // Show loading state
    const submitButton = event.target.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Iniciando sesión...';
    submitButton.disabled = true;
    
    try {
      console.log('Attempting Firebase authentication...');
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      console.log('Login successful:', userCredential.user);
      console.log('User email:', userCredential.user.email);
      console.log('User UID:', userCredential.user.uid);
      
      // Show success message
      if (errorElement) {
        errorElement.textContent = '¡Login exitoso! Redirigiendo al dashboard...';
        errorElement.classList.remove('hidden');
        errorElement.classList.remove('text-red-400');
        errorElement.classList.add('text-green-400');
      }
      
      console.log('Redirecting to dashboard in 1.5 seconds...');
      // Redirect to admin dashboard after a short delay
      setTimeout(() => {
        console.log('Executing redirect to /admin/dashboard');
        window.location.href = '/admin/dashboard';
      }, 1500);
      
    } catch (error) {
      console.error('Login error:', error);
      console.error('Error code:', error.code);
      console.error('Error message:', error.message);
      
      // Show error message
      if (errorElement) {
        let errorMessage = 'Credenciales incorrectas. Por favor intenta de nuevo.';
        
        // Provide more specific error messages
        switch (error.code) {
          case 'auth/user-not-found':
            errorMessage = 'No existe una cuenta con este correo electrónico.';
            break;
          case 'auth/wrong-password':
            errorMessage = 'Contraseña incorrecta.';
            break;
          case 'auth/invalid-email':
            errorMessage = 'Correo electrónico inválido.';
            break;
          case 'auth/too-many-requests':
            errorMessage = 'Demasiados intentos fallidos. Intenta más tarde.';
            break;
          case 'auth/network-request-failed':
            errorMessage = 'Error de conexión. Verifica tu internet.';
            break;
          case 'auth/invalid-api-key':
            errorMessage = 'Error de configuración de Firebase.';
            break;
        }
        
        errorElement.textContent = errorMessage;
        errorElement.classList.remove('hidden');
        errorElement.classList.remove('text-green-400');
        errorElement.classList.add('text-red-400');
      }
    } finally {
      // Restore button state
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    }
  };
  
  function updateCartBadge() {
    const badge = document.getElementById('cart-badge');
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    
    if (totalItems > 0) {
      badge.style.display = 'flex';
      badge.textContent = totalItems.toString();
    } else {
      badge.style.display = 'none';
    }
  }
  
  function updateCartTotal() {
    const total = cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
    const totalElement = document.getElementById('cart-total');
    totalElement.textContent = new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN',
    }).format(total);
  }
  
  function renderCartItems() {
    const cartItems = document.getElementById('cart-items');
    
    if (cart.length === 0) {
      cartItems.innerHTML = `
        <div class="text-center text-luxury-gold-light">
          <svg class="w-16 h-16 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
          </svg>
          <p>Tu carrito está vacío</p>
        </div>
      `;
      return;
    }
    
    cartItems.innerHTML = cart.map(item => `
      <div class="flex items-center space-x-4 mb-4 p-4 bg-luxury-black rounded-lg">
        <img src="${item.product.image}" alt="${item.product.name}" class="w-16 h-16 object-cover rounded">
        <div class="flex-1">
          <h4 class="text-luxury-white font-medium">${item.product.name}</h4>
          <p class="text-luxury-gold-light text-sm">${new Intl.NumberFormat('es-MX', {
            style: 'currency',
            currency: 'MXN',
          }).format(item.product.price)}</p>
        </div>
        <div class="flex items-center space-x-2">
          <button onclick="updateCartQuantity('${item.id}', ${item.quantity - 1})" class="w-6 h-6 rounded border border-luxury-gold text-luxury-gold hover:bg-luxury-gold hover:text-luxury-black transition-colors duration-200 flex items-center justify-center">-</button>
          <span class="w-8 text-center text-luxury-white">${item.quantity}</span>
          <button onclick="updateCartQuantity('${item.id}', ${item.quantity + 1})" class="w-6 h-6 rounded border border-luxury-gold text-luxury-gold hover:bg-luxury-gold hover:text-luxury-black transition-colors duration-200 flex items-center justify-center">+</button>
        </div>
        <button onclick="removeFromCart('${item.id}')" class="text-red-400 hover:text-red-300 transition-colors duration-200">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
          </svg>
        </button>
      </div>
    `).join('');
  }
  
  function addToCart(product, quantity) {
    const existingItem = cart.find(item => item.product.id === product.id);
    
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      cart.push({
        id: Date.now().toString(),
        product,
        quantity
      });
    }
    
    updateCartBadge();
    updateCartTotal();
    renderCartItems();
    
    // Save to localStorage
    localStorage.setItem('cart', JSON.stringify(cart));
  }
  
  function updateCartQuantity(itemId, newQuantity) {
    if (newQuantity <= 0) {
      removeFromCart(itemId);
      return;
    }
    
    const item = cart.find(item => item.id === itemId);
    if (item) {
      item.quantity = newQuantity;
      updateCartBadge();
      updateCartTotal();
      renderCartItems();
      localStorage.setItem('cart', JSON.stringify(cart));
    }
  }
  
  function removeFromCart(itemId) {
    cart = cart.filter(item => item.id !== itemId);
    updateCartBadge();
    updateCartTotal();
    renderCartItems();
    localStorage.setItem('cart', JSON.stringify(cart));
  }
  
  function proceedToCheckout() {
    if (cart.length > 0) {
      window.location.href = '/checkout';
    }
  }
  
  // Load cart from localStorage on page load
  document.addEventListener('DOMContentLoaded', () => {
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
      cart = JSON.parse(savedCart);
      updateCartBadge();
      updateCartTotal();
      renderCartItems();
    }
  });
  
  // Expose functions globally for product cards
  window.addToCart = addToCart;
  window.updateCartQuantity = updateCartQuantity;
  window.removeFromCart = removeFromCart;
  window.proceedToCheckout = proceedToCheckout;
</script> 