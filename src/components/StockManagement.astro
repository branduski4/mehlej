---
import { getProductsFromFirestore } from '../lib/firestore';
import type { Product } from '../types';

// Obtener productos de Firestore
let products: Product[] = [];
let loading = true;
let error = false;

try {
  const result = await getProductsFromFirestore();
  if (result.success) {
    products = result.products;
  } else {
    error = true;
    console.error('Error obteniendo productos:', result.error);
  }
} catch (err) {
  error = true;
  console.error('Error en StockManagement:', err);
} finally {
  loading = false;
}

// Funciones auxiliares para estadísticas
function getLowStockProducts(threshold: number = 5): Product[] {
  return products.filter(product => product.stock <= threshold && product.stock > 0);
}

function getOutOfStockProductsList(): Product[] {
  return products.filter(product => product.stock === 0);
}
---

<div class="bg-luxury-gray rounded-lg p-6">
  <h2 class="text-2xl font-playfair font-semibold text-luxury-gold mb-6">Administración de Inventario</h2>
  
  {loading && (
    <div class="flex justify-center items-center py-12">
      <div class="text-luxury-gold text-lg">Cargando inventario...</div>
    </div>
  )}
  
  {error && (
    <div class="text-center py-12">
      <div class="text-red-400 text-lg mb-4">Error al cargar el inventario</div>
      <button 
        onclick="window.location.reload()"
        class="bg-luxury-gold text-luxury-black px-4 py-2 rounded hover:bg-luxury-gold-dark transition-colors duration-200"
      >
        Reintentar
      </button>
    </div>
  )}
  
  {!loading && !error && (
    <>
      <!-- Stock Overview -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
        <div class="bg-luxury-black p-4 rounded-lg">
          <div class="text-3xl font-bold text-luxury-gold">{products.length}</div>
          <div class="text-luxury-gold-light text-sm">Total de Productos</div>
        </div>
        <div class="bg-luxury-black p-4 rounded-lg">
          <div class="text-3xl font-bold text-green-400">{products.filter(p => p.stock > 0).length}</div>
          <div class="text-luxury-gold-light text-sm">En Existencia</div>
        </div>
        <div class="bg-luxury-black p-4 rounded-lg">
          <div class="text-3xl font-bold text-red-400">{getOutOfStockProductsList().length}</div>
          <div class="text-luxury-gold-light text-sm">Sin Existencia</div>
        </div>
      </div>
      
      <!-- Stock Alerts -->
      <div class="space-y-4 mb-8">
        {getOutOfStockProductsList().length > 0 && (
          <div class="bg-red-500 bg-opacity-20 border border-red-500 text-red-300 p-4 rounded-lg">
            <h3 class="font-semibold mb-2">⚠️ Productos Sin Existencia</h3>
            <ul class="space-y-1">
              {getOutOfStockProductsList().map(product => (
                <li class="text-sm">• {product.name}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
      
      <!-- Product Stock Table -->
      <div class="overflow-x-auto">
        <table class="w-full text-left">
          <thead class="bg-luxury-black text-luxury-gold-light">
            <tr>
              <th class="p-3 font-medium">Producto</th>
              <th class="p-3 font-medium">Categoría</th>
              <th class="p-3 font-medium">Inventario Actual</th>
              <th class="p-3 font-medium">Estado</th>
              <th class="p-3 font-medium">Acciones</th>
            </tr>
          </thead>
          <tbody class="text-luxury-white">
            {products.map(product => (
              <tr class="border-b border-luxury-gold border-opacity-20 hover:bg-luxury-black transition-colors duration-200">
                <td class="p-3">
                  <div class="flex items-center space-x-3">
                    <img src={product.image} alt={product.name} class="w-12 h-12 object-cover rounded" />
                    <div>
                      <div class="font-medium">{product.name}</div>
                      <div class="text-sm text-luxury-gold-light">${product.price}</div>
                    </div>
                  </div>
                </td>
                <td class="p-3 text-sm capitalize">
                  {product.category === 'rings' ? 'Anillos' : 
                   product.category === 'necklaces' ? 'Collares' :
                   product.category === 'earrings' ? 'Aretes' :
                   product.category === 'bracelets' ? 'Brazaletes' :
                   product.category === 'watches' ? 'Relojes' : product.category}
                </td>
                <td class="p-3">
                  <span class={`font-medium ${
                    product.stock === 0 ? 'text-red-400' : 'text-green-400'
                  }`}>
                    {product.stock}
                  </span>
                </td>
                <td class="p-3">
                  {product.stock === 0 ? (
                    <span class="bg-red-500 text-white px-2 py-1 rounded-full text-xs">Sin Existencia</span>
                  ) : (
                    <span class="bg-green-500 text-white px-2 py-1 rounded-full text-xs">En Existencia</span>
                  )}
                </td>
                <td class="p-3">
                  <div class="flex items-center space-x-2">
                    <button 
                      class="bg-luxury-gold text-luxury-black px-3 py-1 rounded text-sm hover:bg-luxury-gold-dark transition-colors duration-200"
                      onclick={`openEditProductModal('${product.id}', '${product.name}', '${product.description}', ${product.price}, '${product.image}', '${product.category}', ${product.stock}, ${product.featured})`}
                    >
                      Editar
                    </button>
                    <button 
                      class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition-colors duration-200"
                      onclick={`openDeleteProductModal('${product.id}', '${product.name}')`}
                    >
                      Eliminar
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </>
  )}
</div>

<!-- Product Edit Modal -->
<div id="edit-product-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
  <div class="bg-luxury-gray rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-xl font-playfair font-semibold text-luxury-gold">Editar Producto</h3>
      <button 
        onclick="closeEditProductModal()"
        class="text-luxury-gold-light hover:text-luxury-gold text-2xl font-bold"
      >
        ×
      </button>
    </div>
    
    <form id="edit-product-form" class="space-y-6">
      <!-- Nombre del Producto -->
      <div>
        <label for="edit-product-name" class="block text-luxury-gold-light text-sm mb-2">Nombre del Producto *</label>
        <input 
          type="text" 
          id="edit-product-name" 
          name="name"
          required
          class="w-full px-4 py-3 rounded bg-luxury-black text-luxury-white border border-luxury-gold focus:outline-none focus:ring-2 focus:ring-luxury-gold"
          placeholder="Ej: Anillo de Diamante"
        />
      </div>
      
      <!-- Descripción -->
      <div>
        <label for="edit-product-description" class="block text-luxury-gold-light text-sm mb-2">Descripción *</label>
        <textarea 
          id="edit-product-description" 
          name="description"
          required
          rows="3"
          class="w-full px-4 py-3 rounded bg-luxury-black text-luxury-white border border-luxury-gold focus:outline-none focus:ring-2 focus:ring-luxury-gold resize-none"
          placeholder="Describe el producto..."
        ></textarea>
      </div>
      
      <!-- Precio -->
      <div>
        <label for="edit-product-price" class="block text-luxury-gold-light text-sm mb-2">Precio (MXN) *</label>
        <input 
          type="number" 
          id="edit-product-price" 
          name="price"
          required
          min="0"
          step="0.01"
          class="w-full px-4 py-3 rounded bg-luxury-black text-luxury-white border border-luxury-gold focus:outline-none focus:ring-2 focus:ring-luxury-gold"
          placeholder="0.00"
        />
      </div>
      
      <!-- URL de la Imagen -->
      <div>
        <label for="edit-product-image" class="block text-luxury-gold-light text-sm mb-2">URL de la Imagen *</label>
        <input 
          type="url" 
          id="edit-product-image" 
          name="image"
          required
          class="w-full px-4 py-3 rounded bg-luxury-black text-luxury-white border border-luxury-gold focus:outline-none focus:ring-2 focus:ring-luxury-gold"
          placeholder="https://ejemplo.com/imagen.jpg"
        />
      </div>
      
      <!-- Categoría -->
      <div>
        <label for="edit-product-category" class="block text-luxury-gold-light text-sm mb-2">Categoría *</label>
        <select 
          id="edit-product-category" 
          name="category"
          required
          class="w-full px-4 py-3 rounded bg-luxury-black text-luxury-white border border-luxury-gold focus:outline-none focus:ring-2 focus:ring-luxury-gold"
        >
          <option value="">Selecciona una categoría</option>
          <option value="rings">Anillos</option>
          <option value="necklaces">Collares</option>
          <option value="earrings">Aretes</option>
          <option value="bracelets">Brazaletes</option>
          <option value="watches">Relojes</option>
        </select>
      </div>
      
      <!-- Stock -->
      <div>
        <label for="edit-product-stock" class="block text-luxury-gold-light text-sm mb-2">Stock Disponible *</label>
        <input 
          type="number" 
          id="edit-product-stock" 
          name="stock"
          required
          min="0"
          class="w-full px-4 py-3 rounded bg-luxury-black text-luxury-white border border-luxury-gold focus:outline-none focus:ring-2 focus:ring-luxury-gold"
          placeholder="0"
        />
      </div>
      
      <!-- Producto Destacado -->
      <div class="flex items-center space-x-3">
        <input 
          type="checkbox" 
          id="edit-product-featured" 
          name="featured"
          class="w-4 h-4 text-luxury-gold bg-luxury-black border-luxury-gold rounded focus:ring-luxury-gold focus:ring-2"
        />
        <label for="edit-product-featured" class="text-luxury-gold-light text-sm">Producto Destacado</label>
      </div>
      
      <!-- Botones -->
      <div class="flex space-x-3 pt-4">
        <button 
          type="button"
          onclick="closeEditProductModal()"
          class="flex-1 px-4 py-2 bg-transparent border border-luxury-gold text-luxury-gold rounded hover:bg-luxury-gold hover:text-luxury-black transition-colors duration-200"
        >
          Cancelar
        </button>
        <button 
          type="submit"
          class="flex-1 px-4 py-2 bg-luxury-gold text-luxury-black rounded hover:bg-luxury-gold-dark transition-colors duration-200"
        >
          Guardar Cambios
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Delete Product Confirmation Modal -->
<div id="delete-product-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
  <div class="bg-luxury-gray rounded-lg p-6 w-full max-w-md">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-xl font-playfair font-semibold text-luxury-gold">Confirmar Eliminación</h3>
      <button 
        onclick="closeDeleteProductModal()"
        class="text-luxury-gold-light hover:text-luxury-gold text-2xl font-bold"
      >
        ×
      </button>
    </div>
    
    <div class="space-y-4">
      <div class="text-center">
        <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
          </svg>
        </div>
        <h4 class="text-lg font-medium text-luxury-white mb-2">¿Eliminar producto?</h4>
        <p class="text-luxury-gold-light text-sm mb-4">
          ¿Estás seguro de que quieres eliminar el producto <strong id="delete-product-name" class="text-luxury-white"></strong>?
        </p>
        <p class="text-red-400 text-xs">
          ⚠️ Esta acción no se puede deshacer. El producto se eliminará permanentemente.
        </p>
      </div>
    </div>
    
    <div class="flex space-x-3 mt-6">
      <button 
        onclick="closeDeleteProductModal()"
        class="flex-1 px-4 py-2 bg-transparent border border-luxury-gold text-luxury-gold rounded hover:bg-luxury-gold hover:text-luxury-black transition-colors duration-200"
      >
        Cancelar
      </button>
      <button 
        onclick="confirmDeleteProduct()"
        class="flex-1 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors duration-200"
      >
        Eliminar
      </button>
    </div>
  </div>
</div>

<script>
  import { updateProductInFirestore, deleteProductFromFirestore } from '../lib/firestore';
  
  let currentProductId: string | null = null;
  let productToDeleteId: string | null = null;
  
  function openEditProductModal(productId: string, productName: string, description: string, price: number, image: string, category: string, stock: number, featured: boolean) {
    console.log('Abriendo modal de edición para:', productName);
    currentProductId = productId;
    
    const modal = document.getElementById('edit-product-modal');
    const nameInput = document.getElementById('edit-product-name') as HTMLInputElement;
    const descriptionInput = document.getElementById('edit-product-description') as HTMLTextAreaElement;
    const priceInput = document.getElementById('edit-product-price') as HTMLInputElement;
    const imageInput = document.getElementById('edit-product-image') as HTMLInputElement;
    const categoryInput = document.getElementById('edit-product-category') as HTMLSelectElement;
    const stockInput = document.getElementById('edit-product-stock') as HTMLInputElement;
    const featuredInput = document.getElementById('edit-product-featured') as HTMLInputElement;
    
    if (modal && nameInput && descriptionInput && priceInput && imageInput && categoryInput && stockInput && featuredInput) {
      // Llenar los campos con los datos actuales
      nameInput.value = productName;
      descriptionInput.value = description;
      priceInput.value = price.toString();
      imageInput.value = image;
      categoryInput.value = category;
      stockInput.value = stock.toString();
      featuredInput.checked = featured;
      
      modal.classList.remove('hidden');
      console.log('Modal de edición abierto correctamente');
    } else {
      console.error('No se encontraron elementos del modal de edición');
    }
  }
  
  function closeEditProductModal() {
    const modal = document.getElementById('edit-product-modal');
    if (modal) {
      modal.classList.add('hidden');
      currentProductId = null;
    }
  }
  
  function openDeleteProductModal(productId: string, productName: string) {
    console.log('Abriendo modal de eliminación para:', productName);
    productToDeleteId = productId;
    
    const modal = document.getElementById('delete-product-modal');
    const productNameElement = document.getElementById('delete-product-name');
    
    if (modal && productNameElement) {
      productNameElement.textContent = productName;
      modal.classList.remove('hidden');
      console.log('Modal de eliminación abierto correctamente');
    } else {
      console.error('No se encontraron elementos del modal de eliminación');
    }
  }
  
  function closeDeleteProductModal() {
    const modal = document.getElementById('delete-product-modal');
    if (modal) {
      modal.classList.add('hidden');
      productToDeleteId = null;
    }
  }
  
  function confirmDeleteProduct() {
    if (!productToDeleteId) {
      showNotification('Error: No hay producto seleccionado para eliminar', 'error');
      return;
    }
    
    console.log('Eliminando producto:', productToDeleteId);
    
    // Mostrar indicador de carga
    const deleteBtn = document.querySelector('#delete-product-modal button[onclick="confirmDeleteProduct()"]') as HTMLButtonElement;
    const originalText = deleteBtn.textContent || 'Eliminar';
    deleteBtn.textContent = 'Eliminando...';
    deleteBtn.disabled = true;
    
    // Eliminar producto de Firestore
    deleteProductFromFirestore(productToDeleteId).then((result) => {
      if (result.success) {
        showNotification('¡Producto eliminado exitosamente!', 'success');
        closeDeleteProductModal();
        
        // Recargar la página para mostrar los cambios
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        showNotification('Error al eliminar el producto', 'error');
        console.error('Error eliminando producto:', result.error);
      }
    }).catch((error) => {
      console.error('Error:', error);
      showNotification('Error al eliminar el producto', 'error');
    }).finally(() => {
      // Restaurar botón
      deleteBtn.textContent = originalText;
      deleteBtn.disabled = false;
    });
  }
  
  // Manejar el envío del formulario de edición
  document.addEventListener('DOMContentLoaded', () => {
    const editForm = document.getElementById('edit-product-form') as HTMLFormElement;
    
    editForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!currentProductId) {
        showNotification('Error: No hay producto seleccionado', 'error');
        return;
      }
      
      const formData = new FormData(editForm);
      const productData = {
        name: formData.get('name') as string,
        description: formData.get('description') as string,
        price: parseFloat(formData.get('price') as string),
        image: formData.get('image') as string,
        category: formData.get('category') as string,
        stock: parseInt(formData.get('stock') as string),
        featured: formData.get('featured') === 'on',
      };
      
      // Validaciones básicas
      if (!productData.name || !productData.description || !productData.image || !productData.category) {
        showNotification('Por favor completa todos los campos requeridos', 'error');
        return;
      }
      
      if (productData.price <= 0) {
        showNotification('El precio debe ser mayor a 0', 'error');
        return;
      }
      
      if (productData.stock < 0) {
        showNotification('El stock no puede ser negativo', 'error');
        return;
      }
      
      // Mostrar indicador de carga
      const submitBtn = editForm.querySelector('button[type="submit"]') as HTMLButtonElement;
      const originalText = submitBtn.textContent || 'Guardar Cambios';
      submitBtn.textContent = 'Guardando...';
      submitBtn.disabled = true;
      
      try {
        console.log('Actualizando producto:', currentProductId, 'con datos:', productData);
        
        // Actualizar producto en Firestore
        const result = await updateProductInFirestore(currentProductId, {
          name: productData.name,
          description: productData.description,
          price: productData.price,
          image: productData.image,
          category: productData.category as any,
          stock: productData.stock,
          featured: productData.featured,
        });
        
        if (result.success) {
          showNotification('¡Producto actualizado exitosamente!', 'success');
          closeEditProductModal();
          
          // Recargar la página para mostrar los cambios
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showNotification('Error al actualizar el producto', 'error');
        }
      } catch (error) {
        console.error('Error:', error);
        showNotification('Error al actualizar el producto', 'error');
      } finally {
        // Restaurar botón
        submitBtn.textContent = originalText || 'Guardar Cambios';
        submitBtn.disabled = false;
      }
    });
    
    // Close modal when clicking outside
    const editModal = document.getElementById('edit-product-modal');
    if (editModal) {
      editModal.addEventListener('click', (e) => {
        if (e.target === editModal) {
          closeEditProductModal();
        }
      });
    }
    
    const deleteModal = document.getElementById('delete-product-modal');
    if (deleteModal) {
      deleteModal.addEventListener('click', (e) => {
        if (e.target === deleteModal) {
          closeDeleteProductModal();
        }
      });
    }
    
    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeEditProductModal();
        closeDeleteProductModal();
      }
    });
  });
  
  function showNotification(message: string, type: 'success' | 'error') {
    // Remover notificaciones existentes
    const existingNotifications = document.querySelectorAll('.snackbar-notification');
    existingNotifications.forEach(notification => notification.remove());
    
    // Crear el snackbar
    const notification = document.createElement('div');
    notification.className = `snackbar-notification fixed top-4 right-4 px-6 py-4 rounded-lg text-white font-medium z-50 transform translate-x-full transition-transform duration-300 ease-in-out ${
      type === 'success' 
        ? 'bg-green-600 border border-green-500 shadow-lg' 
        : 'bg-red-600 border border-red-500 shadow-lg'
    }`;
    
    // Icono según el tipo
    const icon = type === 'success' 
      ? '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
      : '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
    
    // Contenido del snackbar
    notification.innerHTML = `
      <div class="flex items-center">
        ${icon}
        <span>${message}</span>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200 transition-colors duration-200">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;
    
    // Agregar al DOM
    document.body.appendChild(notification);
    
    // Animar entrada
    setTimeout(() => {
      notification.classList.remove('translate-x-full');
    }, 100);
    
    // Auto-remover después de 4 segundos
    setTimeout(() => {
      if (notification.parentElement) {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
          notification.remove();
        }, 300);
      }
    }, 4000);
  }
  
  // Hacer las funciones disponibles globalmente
  (window as any).openEditProductModal = openEditProductModal;
  (window as any).closeEditProductModal = closeEditProductModal;
  (window as any).openDeleteProductModal = openDeleteProductModal;
  (window as any).closeDeleteProductModal = closeDeleteProductModal;
  (window as any).confirmDeleteProduct = confirmDeleteProduct;
</script> 